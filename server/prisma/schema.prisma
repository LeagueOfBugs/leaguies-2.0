generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Season {
  id            Int       @id @default(autoincrement())
  name          String
  active        Boolean   @default(false)
  startDate     DateTime? 
  endDate       DateTime? 
  isCurrent     Boolean?  @default(false) 
  matches       Match[]   
  leagueId      Int      
  league        League   @relation(fields: [leagueId], references: [id])
  trophyId      Int?      @unique
  trophy        Trophy?   @relation("SeasonTrophy", fields: [trophyId], references: [id])
  teams         TeamSeason[]
  winnerTeamId  Int?      
  winnerTeam    Team?     @relation("WinningTeam", fields: [winnerTeamId], references: [id]) 
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}


model TeamSeason {
  id         Int      @id @default(autoincrement())
  teamId     Int
  team       Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)
  seasonId   Int
  season     Season   @relation(fields: [seasonId], references: [id], onDelete: Cascade)
  wins       Int      @default(0) 
  losses     Int      @default(0) 
  draws      Int      @default(0) 
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([teamId, seasonId])
}

model Trophy {
  id          Int      @id @default(autoincrement())
  name        String
  description String?  
  season      Season?  @relation("SeasonTrophy") 
  teamId      Int?     
  team        Team?    @relation(fields: [teamId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Award {
  id          Int        @id @default(autoincrement())
  name        String    
  description String?   
  playerId    Int?       
  player      Player?     @relation(fields: [playerId], references: [id], onDelete: SetNull) 
  matchId     Int?      
  match       Match?     @relation("MatchAwards", fields: [matchId], references: [id], onDelete: SetNull) 
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model Match {
  id            Int       @id @default(autoincrement())
  name          String
  date          DateTime?  @default(now())
  homeTeamId    Int?      
  awayTeamId    Int?      
  homeTeam      Team?      @relation("HomeMatches", fields: [homeTeamId], references: [id])
  awayTeam      Team?      @relation("AwayMatches", fields: [awayTeamId], references: [id])
  seasonId      Int?      
  season        Season?    @relation(fields: [seasonId], references: [id])
  homeScore     Int?     
  awayScore     Int?     
  referees      MatchReferee[]
  awards        Award[]   @relation("MatchAwards") 
  venueId       Int?       
  venue         Venue?     @relation(fields: [venueId], references: [id]) 
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Referee {
  id         Int            @id @default(autoincrement())
  name       String
  matches    MatchReferee[] 
  createdAt  DateTime       @default(now())
  updatedAt  DateTime       @updatedAt
}

model MatchReferee {
  matchId    Int
  refereeId  Int
  match      Match   @relation(fields: [matchId], references: [id], onDelete: Cascade)
  referee    Referee @relation(fields: [refereeId], references: [id], onDelete: Cascade)

  @@id([matchId, refereeId]) 
}

model Venue {
  id         Int      @id @default(autoincrement())
  name       String
  location   String   
  capacity   Int?     
  matches    Match[]  
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Sport {
  id        Int        @id @default(autoincrement())
  name      String  
  positions Position[]  
  statTypes StatType[] 
  leagues   League[]
  players   PlayerSport[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt    
}

model League {
  id        Int      @id @default(autoincrement())
  name      String
  active    Boolean  @default(false)  
  teams     Team[]
  seasons   Season[]
  sportId   Int?      
  sport     Sport?    @relation(fields: [sportId], references: [id])
  players   PlayerLeague[] 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Team {
  id          Int           @id @default(autoincrement())
  name        String
  players     PlayerTeam[]  
  leagueId    Int?
  active      Boolean       @default(false)  
  league      League?       @relation(fields: [leagueId], references: [id], onDelete: SetNull) 
  homeMatches Match[]       @relation("HomeMatches")
  awayMatches Match[]       @relation("AwayMatches")
  trophies    Trophy[]      
  seasons     TeamSeason[]  
  winningSeasons Season[]   @relation("WinningTeam") 
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}


model Position {
  id           Int          @id @default(autoincrement())
  name         String
  abbreviation String?     
  sportId      Int         
  sport        Sport        @relation(fields: [sportId], references: [id])
  subPositions SubPosition[] 
  players      PlayerPosition[] 
}

model SubPosition {
  id           Int      @id @default(autoincrement())
  name         String
  abbreviation String? 
  positionId   Int      
  position     Position  @relation(fields: [positionId], references: [id])
  playerPositions PlayerPosition[]
}

model Player {
  id         Int           @id @default(autoincrement())
  name       String
  awards     Award[]
  positions  PlayerPosition[]     
  stats      PlayerStats[] 
  teams      PlayerTeam[] 
  leagues    PlayerLeague[]
  sports     PlayerSport[]
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt
}

model PlayerPosition {
  playerId     Int
  positionId   Int
  subPositionId Int? 
  player       Player     @relation(fields: [playerId], references: [id])
  position     Position   @relation(fields: [positionId], references: [id])
  subPosition  SubPosition? @relation(fields: [subPositionId], references: [id])

  @@id([playerId, positionId]) 
}

model PlayerTeam {
  playerId Int
  teamId   Int
  player   Player @relation(fields: [playerId], references: [id], onDelete: Cascade)
  team     Team   @relation(fields: [teamId], references: [id], onDelete: Cascade)

  @@id([playerId, teamId]) 
}

model PlayerSport {
  playerId Int
  sportId  Int

  player  Player @relation(fields: [playerId], references: [id])
  sport   Sport  @relation(fields: [sportId], references: [id])

  @@id([playerId, sportId]) 
}

model PlayerLeague {
  playerId Int
  leagueId  Int

  player  Player @relation(fields: [playerId], references: [id])
  league  League @relation(fields: [leagueId], references: [id])

  @@id([playerId, leagueId]) 
}

model PlayerStats {
  id           Int      @id @default(autoincrement())
  playerId     Int      
  player       Player   @relation(fields: [playerId], references: [id]) 
  statTypeId   Int      
  statType     StatType @relation(fields: [statTypeId], references: [id]) 
  value        Float?     
}

model StatType {
  id           Int      @id @default(autoincrement())
  name         String   
  abbreviation String?  
  description  String?   
  sportId      Int      
  sport        Sport    @relation(fields: [sportId], references: [id])
  playerStats  PlayerStats[] 
}

